# train_model.py
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import Pipeline
import joblib
from pathlib import Path

# ----------------------------
# 1. إنشاء داتا صغيرة (نفس الأعمدة المطلوبة)
# ----------------------------
data = {
    'age': np.random.randint(29, 77, 100),
    'sex': np.random.randint(0, 2, 100),
    'cp': np.random.randint(0, 4, 100),
    'trestbps': np.random.randint(90, 180, 100),
    'chol': np.random.randint(150, 350, 100),
    'fbs': np.random.randint(0, 2, 100),
    'restecg': np.random.randint(0, 3, 100),
    'thalach': np.random.randint(100, 200, 100),
    'exang': np.random.randint(0, 2, 100),
    'oldpeak': np.round(np.random.uniform(0.0, 4.0, 100), 1),
    'slope': np.random.randint(0, 3, 100),
    'ca': np.random.randint(0, 4, 100),
    'thal': np.random.randint(1, 4, 100),
    'target': np.random.randint(0, 2, 100)  # 0=Low risk,1=High risk
}

df = pd.DataFrame(data)

# ----------------------------
# 2. الأعمدة و الـ target
# ----------------------------
features = ['age','sex','cp','trestbps','chol','fbs','restecg','thalach',
            'exang','oldpeak','slope','ca','thal']
X = df[features]
y = df['target']

# ----------------------------
# 3. Split الداتا
# ----------------------------
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# ----------------------------
# 4. عمل Pipeline
# ----------------------------
pipeline = Pipeline([
    ('scaler', StandardScaler()),
    ('model', LogisticRegression(max_iter=1000))
])

# ----------------------------
# 5. تدريب الموديل
# ----------------------------
pipeline.fit(X_train, y_train)

# ----------------------------
# 6. حفظ الموديل في models/final_model.pkl
# ----------------------------
Path("models").mkdir(exist_ok=True)
joblib.dump(pipeline, "models/final_model.pkl")

print("✅ Model trained and saved to models/final_model.pkl")
